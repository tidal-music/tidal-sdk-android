package com.tidal.sdk.player.streamingprivileges.connection.websocketevents

import com.tidal.sdk.player.streamingprivileges.StreamingPrivilegesEventDispatcher
import com.tidal.sdk.player.streamingprivileges.connection.ConnectionMutableState
import com.tidal.sdk.player.streamingprivileges.connection.SocketConnectionState
import okhttp3.WebSocket
import org.junit.jupiter.api.AfterEach
import org.junit.jupiter.api.Test
import org.mockito.kotlin.doReturn
import org.mockito.kotlin.mock
import org.mockito.kotlin.verify
import org.mockito.kotlin.verifyNoMoreInteractions
import org.mockito.kotlin.whenever

internal class OnWebSocketOpenTest {

    private val connectedFactory = mock<SocketConnectionState.Connected.Factory>()
    private val streamingPrivilegesEventDispatcher = mock<StreamingPrivilegesEventDispatcher>()
    private val onWebSocketOpen =
        OnWebSocketOpen(connectedFactory, streamingPrivilegesEventDispatcher)

    @AfterEach
    fun afterEach() = verifyNoMoreInteractions(connectedFactory, streamingPrivilegesEventDispatcher)

    @Test
    fun invokeSetsConnectionStateAndDispatchesConnectionEstablishedCallback() {
        val connectionMutableState = mock<ConnectionMutableState>()
        val connected = mock<SocketConnectionState.Connected>()
        val webSocket = mock<WebSocket>()
        whenever(connectedFactory.create(webSocket)) doReturn connected

        onWebSocketOpen(webSocket, connectionMutableState)

        verify(connectedFactory).create(webSocket)
        verify(connectionMutableState).socketConnectionState = connected
        verify(streamingPrivilegesEventDispatcher)
            .dispatchConnectionEstablished(connectionMutableState)
    }
}
