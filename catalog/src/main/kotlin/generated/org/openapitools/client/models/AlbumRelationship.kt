/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package generated.org.openapitools.client.models

import generated.org.openapitools.client.models.AlbumAttributes
import generated.org.openapitools.client.models.ArtistAttributes
import generated.org.openapitools.client.models.ExternalLink
import generated.org.openapitools.client.models.ImageLink
import generated.org.openapitools.client.models.ProviderAttributes
import generated.org.openapitools.client.models.TrackAttributes
import generated.org.openapitools.client.models.VideoAttributes
import generated.org.openapitools.client.models.VideoLink

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * attributes object representing some of the resource's data
 *
 * @param name Provider name. Conditionally visible.
 * @param popularity Album popularity (ranged in 0.00 ... 1.00). Conditionally visible
 * @param title Original title
 * @param isrc ISRC code
 * @param duration Duration (ISO-8601)
 * @param explicit Indicates whether an album consist of any explicit content
 * @param mediaTags
 * @param barcodeId Barcode id (EAN-13 or UPC-A)
 * @param numberOfVolumes Number of volumes
 * @param numberOfItems Number of album items
 * @param imageLinks Represents available links to, and metadata about, an album cover images
 * @param externalLinks Represents available links to something that is related to an album resource, but external to the TIDAL API
 * @param version Version of the album's item; complements title
 * @param copyright Copyright information
 * @param availability Defines an album availability e.g. for streaming, DJs, stems
 * @param releaseDate Release date (ISO-8601)
 * @param videoLinks Represents available links to, and metadata about, an album cover videos
 */
@JsonClass(generateAdapter = true)

data class AlbumRelationship (

    /* Provider name. Conditionally visible. */
    @Json(name = "name")
    val name: kotlin.String,

    /* Album popularity (ranged in 0.00 ... 1.00). Conditionally visible */
    @Json(name = "popularity")
    val popularity: kotlin.Double,

    /* Original title */
    @Json(name = "title")
    val title: kotlin.String,

    /* ISRC code */
    @Json(name = "isrc")
    val isrc: kotlin.String,

    /* Duration (ISO-8601) */
    @Json(name = "duration")
    val duration: kotlin.String,

    /* Indicates whether an album consist of any explicit content */
    @Json(name = "explicit")
    val explicit: kotlin.Boolean,

    @Json(name = "mediaTags")
    val mediaTags: kotlin.collections.List<kotlin.String>,

    /* Barcode id (EAN-13 or UPC-A) */
    @Json(name = "barcodeId")
    val barcodeId: kotlin.String,

    /* Number of volumes */
    @Json(name = "numberOfVolumes")
    val numberOfVolumes: kotlin.Int,

    /* Number of album items */
    @Json(name = "numberOfItems")
    val numberOfItems: kotlin.Int,

    /* Represents available links to, and metadata about, an album cover images */
    @Json(name = "imageLinks")
    val imageLinks: kotlin.collections.List<ImageLink>? = null,

    /* Represents available links to something that is related to an album resource, but external to the TIDAL API */
    @Json(name = "externalLinks")
    val externalLinks: kotlin.collections.List<ExternalLink>? = null,

    /* Version of the album's item; complements title */
    @Json(name = "version")
    val version: kotlin.String? = null,

    /* Copyright information */
    @Json(name = "copyright")
    val copyright: kotlin.String? = null,

    /* Defines an album availability e.g. for streaming, DJs, stems */
    @Json(name = "availability")
    val availability: kotlin.collections.List<AlbumRelationship.Availability>? = null,

    /* Release date (ISO-8601) */
    @Json(name = "releaseDate")
    val releaseDate: java.time.LocalDate? = null,

    /* Represents available links to, and metadata about, an album cover videos */
    @Json(name = "videoLinks")
    val videoLinks: kotlin.collections.List<VideoLink>? = null

) {

    /**
     * Defines an album availability e.g. for streaming, DJs, stems
     *
     * Values: STREAM,DJ,STEM
     */
    @JsonClass(generateAdapter = false)
    enum class Availability(val value: kotlin.String) {
        @Json(name = "STREAM") STREAM("STREAM"),
        @Json(name = "DJ") DJ("DJ"),
        @Json(name = "STEM") STEM("STEM");
    }
}
