/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package generated.org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import generated.org.openapitools.client.models.AlbumDataDocument
import generated.org.openapitools.client.models.AlbumRelationshipsDocument
import generated.org.openapitools.client.models.AlbumsDataDocument
import generated.org.openapitools.client.models.ErrorDocument

import com.squareup.moshi.Json

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import generated.org.openapitools.client.infrastructure.ApiClient
import generated.org.openapitools.client.infrastructure.ApiResponse
import generated.org.openapitools.client.infrastructure.ClientException
import generated.org.openapitools.client.infrastructure.ClientError
import generated.org.openapitools.client.infrastructure.ServerException
import generated.org.openapitools.client.infrastructure.ServerError
import generated.org.openapitools.client.infrastructure.MultiValueMap
import generated.org.openapitools.client.infrastructure.PartConfig
import generated.org.openapitools.client.infrastructure.RequestConfig
import generated.org.openapitools.client.infrastructure.RequestMethod
import generated.org.openapitools.client.infrastructure.ResponseType
import generated.org.openapitools.client.infrastructure.Success
import generated.org.openapitools.client.infrastructure.toMultiValue

class AlbumJSONAPIApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://openapi.stage.tidal.com/v2")
        }
    }

    /**
     * Get single album
     * Retrieve album details by TIDAL album id.
     * @param id TIDAL album id
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: artists, items, providers, similarAlbums (optional)
     * @return AlbumDataDocument
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getAlbum(id: kotlin.String, countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>? = null) : AlbumDataDocument = withContext(Dispatchers.IO) {
        val localVarResponse = getAlbumWithHttpInfo(id = id, countryCode = countryCode, include = include)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AlbumDataDocument
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get single album
     * Retrieve album details by TIDAL album id.
     * @param id TIDAL album id
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: artists, items, providers, similarAlbums (optional)
     * @return ApiResponse<AlbumDataDocument?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun getAlbumWithHttpInfo(id: kotlin.String, countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>?) : ApiResponse<AlbumDataDocument?> = withContext(Dispatchers.IO) {
        val localVariableConfig = getAlbumRequestConfig(id = id, countryCode = countryCode, include = include)

        return@withContext request<Unit, AlbumDataDocument>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getAlbum
     *
     * @param id TIDAL album id
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: artists, items, providers, similarAlbums (optional)
     * @return RequestConfig
     */
    fun getAlbumRequestConfig(id: kotlin.String, countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("countryCode", listOf(countryCode.toString()))
                if (include != null) {
                    put("include", toMultiValue(include.toList(), "multi"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/vnd.api+json"
        localVariableHeaders["Accept"] = "application/vnd.api+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/albums/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Relationship: artists
     * Retrieve artist details of the related album.
     * @param id TIDAL album id
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: artists (optional)
     * @return AlbumRelationshipsDocument
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getAlbumArtists(id: kotlin.String, countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>? = null) : AlbumRelationshipsDocument = withContext(Dispatchers.IO) {
        val localVarResponse = getAlbumArtistsWithHttpInfo(id = id, countryCode = countryCode, include = include)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AlbumRelationshipsDocument
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Relationship: artists
     * Retrieve artist details of the related album.
     * @param id TIDAL album id
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: artists (optional)
     * @return ApiResponse<AlbumRelationshipsDocument?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun getAlbumArtistsWithHttpInfo(id: kotlin.String, countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>?) : ApiResponse<AlbumRelationshipsDocument?> = withContext(Dispatchers.IO) {
        val localVariableConfig = getAlbumArtistsRequestConfig(id = id, countryCode = countryCode, include = include)

        return@withContext request<Unit, AlbumRelationshipsDocument>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getAlbumArtists
     *
     * @param id TIDAL album id
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: artists (optional)
     * @return RequestConfig
     */
    fun getAlbumArtistsRequestConfig(id: kotlin.String, countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("countryCode", listOf(countryCode.toString()))
                if (include != null) {
                    put("include", toMultiValue(include.toList(), "multi"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/vnd.api+json"
        localVariableHeaders["Accept"] = "application/vnd.api+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/albums/{id}/relationships/artists".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Relationship: items
     * Retrieve album item details.
     * @param id TIDAL album id
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: items (optional)
     * @return AlbumRelationshipsDocument
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getAlbumItems(id: kotlin.String, countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>? = null) : AlbumRelationshipsDocument = withContext(Dispatchers.IO) {
        val localVarResponse = getAlbumItemsWithHttpInfo(id = id, countryCode = countryCode, include = include)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AlbumRelationshipsDocument
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Relationship: items
     * Retrieve album item details.
     * @param id TIDAL album id
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: items (optional)
     * @return ApiResponse<AlbumRelationshipsDocument?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun getAlbumItemsWithHttpInfo(id: kotlin.String, countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>?) : ApiResponse<AlbumRelationshipsDocument?> = withContext(Dispatchers.IO) {
        val localVariableConfig = getAlbumItemsRequestConfig(id = id, countryCode = countryCode, include = include)

        return@withContext request<Unit, AlbumRelationshipsDocument>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getAlbumItems
     *
     * @param id TIDAL album id
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: items (optional)
     * @return RequestConfig
     */
    fun getAlbumItemsRequestConfig(id: kotlin.String, countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("countryCode", listOf(countryCode.toString()))
                if (include != null) {
                    put("include", toMultiValue(include.toList(), "multi"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/vnd.api+json"
        localVariableHeaders["Accept"] = "application/vnd.api+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/albums/{id}/relationships/items".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Relationship: providers
     * This endpoint can be used to retrieve a list of album&#39;s related providers.
     * @param id TIDAL id of the album
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: providers (optional)
     * @return AlbumRelationshipsDocument
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getAlbumProviders(id: kotlin.String, countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>? = null) : AlbumRelationshipsDocument = withContext(Dispatchers.IO) {
        val localVarResponse = getAlbumProvidersWithHttpInfo(id = id, countryCode = countryCode, include = include)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AlbumRelationshipsDocument
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Relationship: providers
     * This endpoint can be used to retrieve a list of album&#39;s related providers.
     * @param id TIDAL id of the album
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: providers (optional)
     * @return ApiResponse<AlbumRelationshipsDocument?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun getAlbumProvidersWithHttpInfo(id: kotlin.String, countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>?) : ApiResponse<AlbumRelationshipsDocument?> = withContext(Dispatchers.IO) {
        val localVariableConfig = getAlbumProvidersRequestConfig(id = id, countryCode = countryCode, include = include)

        return@withContext request<Unit, AlbumRelationshipsDocument>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getAlbumProviders
     *
     * @param id TIDAL id of the album
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: providers (optional)
     * @return RequestConfig
     */
    fun getAlbumProvidersRequestConfig(id: kotlin.String, countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("countryCode", listOf(countryCode.toString()))
                if (include != null) {
                    put("include", toMultiValue(include.toList(), "multi"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/vnd.api+json"
        localVariableHeaders["Accept"] = "application/vnd.api+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/albums/{id}/relationships/providers".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get multiple albums
     * Retrieve multiple album details.
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: artists, items, providers, similarAlbums (optional)
     * @param filterId Allows to filter the collection of resources based on id attribute value (optional)
     * @param filterBarcodeId Allows to filter the collection of resources based on barcodeId attribute value (optional)
     * @return AlbumsDataDocument
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getAlbums(countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>? = null, filterId: kotlin.collections.List<kotlin.String>? = null, filterBarcodeId: kotlin.collections.List<kotlin.String>? = null) : AlbumsDataDocument = withContext(Dispatchers.IO) {
        val localVarResponse = getAlbumsWithHttpInfo(countryCode = countryCode, include = include, filterId = filterId, filterBarcodeId = filterBarcodeId)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AlbumsDataDocument
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get multiple albums
     * Retrieve multiple album details.
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: artists, items, providers, similarAlbums (optional)
     * @param filterId Allows to filter the collection of resources based on id attribute value (optional)
     * @param filterBarcodeId Allows to filter the collection of resources based on barcodeId attribute value (optional)
     * @return ApiResponse<AlbumsDataDocument?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun getAlbumsWithHttpInfo(countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>?, filterId: kotlin.collections.List<kotlin.String>?, filterBarcodeId: kotlin.collections.List<kotlin.String>?) : ApiResponse<AlbumsDataDocument?> = withContext(Dispatchers.IO) {
        val localVariableConfig = getAlbumsRequestConfig(countryCode = countryCode, include = include, filterId = filterId, filterBarcodeId = filterBarcodeId)

        return@withContext request<Unit, AlbumsDataDocument>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getAlbums
     *
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: artists, items, providers, similarAlbums (optional)
     * @param filterId Allows to filter the collection of resources based on id attribute value (optional)
     * @param filterBarcodeId Allows to filter the collection of resources based on barcodeId attribute value (optional)
     * @return RequestConfig
     */
    fun getAlbumsRequestConfig(countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>?, filterId: kotlin.collections.List<kotlin.String>?, filterBarcodeId: kotlin.collections.List<kotlin.String>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("countryCode", listOf(countryCode.toString()))
                if (include != null) {
                    put("include", toMultiValue(include.toList(), "multi"))
                }
                if (filterId != null) {
                    put("filter[id]", toMultiValue(filterId.toList(), "multi"))
                }
                if (filterBarcodeId != null) {
                    put("filter[barcodeId]", toMultiValue(filterBarcodeId.toList(), "multi"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/vnd.api+json"
        localVariableHeaders["Accept"] = "application/vnd.api+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/albums",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Relationship: similar albums
     * This endpoint can be used to retrieve a list of albums similar to the given album.
     * @param id TIDAL id of the album
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: similarAlbums (optional)
     * @return AlbumRelationshipsDocument
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getSimilarAlbums1(id: kotlin.String, countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>? = null) : AlbumRelationshipsDocument = withContext(Dispatchers.IO) {
        val localVarResponse = getSimilarAlbums1WithHttpInfo(id = id, countryCode = countryCode, include = include)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AlbumRelationshipsDocument
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Relationship: similar albums
     * This endpoint can be used to retrieve a list of albums similar to the given album.
     * @param id TIDAL id of the album
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: similarAlbums (optional)
     * @return ApiResponse<AlbumRelationshipsDocument?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun getSimilarAlbums1WithHttpInfo(id: kotlin.String, countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>?) : ApiResponse<AlbumRelationshipsDocument?> = withContext(Dispatchers.IO) {
        val localVariableConfig = getSimilarAlbums1RequestConfig(id = id, countryCode = countryCode, include = include)

        return@withContext request<Unit, AlbumRelationshipsDocument>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getSimilarAlbums1
     *
     * @param id TIDAL id of the album
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: similarAlbums (optional)
     * @return RequestConfig
     */
    fun getSimilarAlbums1RequestConfig(id: kotlin.String, countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("countryCode", listOf(countryCode.toString()))
                if (include != null) {
                    put("include", toMultiValue(include.toList(), "multi"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/vnd.api+json"
        localVariableHeaders["Accept"] = "application/vnd.api+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/albums/{id}/relationships/similarAlbums".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
