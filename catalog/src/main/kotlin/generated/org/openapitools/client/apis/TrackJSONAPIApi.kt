/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package generated.org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import generated.org.openapitools.client.models.ErrorDocument
import generated.org.openapitools.client.models.TrackDataDocument
import generated.org.openapitools.client.models.TrackRelationshipsDocument
import generated.org.openapitools.client.models.TracksDataDocument

import com.squareup.moshi.Json

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import generated.org.openapitools.client.infrastructure.ApiClient
import generated.org.openapitools.client.infrastructure.ApiResponse
import generated.org.openapitools.client.infrastructure.ClientException
import generated.org.openapitools.client.infrastructure.ClientError
import generated.org.openapitools.client.infrastructure.ServerException
import generated.org.openapitools.client.infrastructure.ServerError
import generated.org.openapitools.client.infrastructure.MultiValueMap
import generated.org.openapitools.client.infrastructure.PartConfig
import generated.org.openapitools.client.infrastructure.RequestConfig
import generated.org.openapitools.client.infrastructure.RequestMethod
import generated.org.openapitools.client.infrastructure.ResponseType
import generated.org.openapitools.client.infrastructure.Success
import generated.org.openapitools.client.infrastructure.toMultiValue

class TrackJSONAPIApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://openapi.stage.tidal.com/v2")
        }
    }

    /**
     * Relationship: similar tracks
     * This endpoint can be used to retrieve a list of tracks similar to the given track.
     * @param id TIDAL id of the track
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: similarTracks (optional)
     * @return TrackRelationshipsDocument
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getSimilarAlbums(id: kotlin.String, countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>? = null) : TrackRelationshipsDocument = withContext(Dispatchers.IO) {
        val localVarResponse = getSimilarAlbumsWithHttpInfo(id = id, countryCode = countryCode, include = include)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TrackRelationshipsDocument
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Relationship: similar tracks
     * This endpoint can be used to retrieve a list of tracks similar to the given track.
     * @param id TIDAL id of the track
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: similarTracks (optional)
     * @return ApiResponse<TrackRelationshipsDocument?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun getSimilarAlbumsWithHttpInfo(id: kotlin.String, countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>?) : ApiResponse<TrackRelationshipsDocument?> = withContext(Dispatchers.IO) {
        val localVariableConfig = getSimilarAlbumsRequestConfig(id = id, countryCode = countryCode, include = include)

        return@withContext request<Unit, TrackRelationshipsDocument>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getSimilarAlbums
     *
     * @param id TIDAL id of the track
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: similarTracks (optional)
     * @return RequestConfig
     */
    fun getSimilarAlbumsRequestConfig(id: kotlin.String, countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("countryCode", listOf(countryCode.toString()))
                if (include != null) {
                    put("include", toMultiValue(include.toList(), "multi"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/vnd.api+json"
        localVariableHeaders["Accept"] = "application/vnd.api+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/tracks/{id}/relationships/similarTracks".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get single track
     * Retrieve track details by TIDAL track id.
     * @param id TIDAL track id
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: artists, albums, providers, similarTracks (optional)
     * @return TrackDataDocument
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getTrack(id: kotlin.String, countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>? = null) : TrackDataDocument = withContext(Dispatchers.IO) {
        val localVarResponse = getTrackWithHttpInfo(id = id, countryCode = countryCode, include = include)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TrackDataDocument
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get single track
     * Retrieve track details by TIDAL track id.
     * @param id TIDAL track id
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: artists, albums, providers, similarTracks (optional)
     * @return ApiResponse<TrackDataDocument?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun getTrackWithHttpInfo(id: kotlin.String, countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>?) : ApiResponse<TrackDataDocument?> = withContext(Dispatchers.IO) {
        val localVariableConfig = getTrackRequestConfig(id = id, countryCode = countryCode, include = include)

        return@withContext request<Unit, TrackDataDocument>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getTrack
     *
     * @param id TIDAL track id
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: artists, albums, providers, similarTracks (optional)
     * @return RequestConfig
     */
    fun getTrackRequestConfig(id: kotlin.String, countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("countryCode", listOf(countryCode.toString()))
                if (include != null) {
                    put("include", toMultiValue(include.toList(), "multi"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/vnd.api+json"
        localVariableHeaders["Accept"] = "application/vnd.api+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/tracks/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Relationship: albums
     * Retrieve album details of the related track.
     * @param id TIDAL track id
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: albums (optional)
     * @return TrackRelationshipsDocument
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getTrackAlbums(id: kotlin.String, countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>? = null) : TrackRelationshipsDocument = withContext(Dispatchers.IO) {
        val localVarResponse = getTrackAlbumsWithHttpInfo(id = id, countryCode = countryCode, include = include)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TrackRelationshipsDocument
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Relationship: albums
     * Retrieve album details of the related track.
     * @param id TIDAL track id
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: albums (optional)
     * @return ApiResponse<TrackRelationshipsDocument?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun getTrackAlbumsWithHttpInfo(id: kotlin.String, countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>?) : ApiResponse<TrackRelationshipsDocument?> = withContext(Dispatchers.IO) {
        val localVariableConfig = getTrackAlbumsRequestConfig(id = id, countryCode = countryCode, include = include)

        return@withContext request<Unit, TrackRelationshipsDocument>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getTrackAlbums
     *
     * @param id TIDAL track id
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: albums (optional)
     * @return RequestConfig
     */
    fun getTrackAlbumsRequestConfig(id: kotlin.String, countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("countryCode", listOf(countryCode.toString()))
                if (include != null) {
                    put("include", toMultiValue(include.toList(), "multi"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/vnd.api+json"
        localVariableHeaders["Accept"] = "application/vnd.api+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/tracks/{id}/relationships/albums".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Relationship: artists
     * Retrieve artist details of the related track.
     * @param id TIDAL track id
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: artists (optional)
     * @return TrackRelationshipsDocument
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getTrackArtists(id: kotlin.String, countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>? = null) : TrackRelationshipsDocument = withContext(Dispatchers.IO) {
        val localVarResponse = getTrackArtistsWithHttpInfo(id = id, countryCode = countryCode, include = include)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TrackRelationshipsDocument
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Relationship: artists
     * Retrieve artist details of the related track.
     * @param id TIDAL track id
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: artists (optional)
     * @return ApiResponse<TrackRelationshipsDocument?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun getTrackArtistsWithHttpInfo(id: kotlin.String, countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>?) : ApiResponse<TrackRelationshipsDocument?> = withContext(Dispatchers.IO) {
        val localVariableConfig = getTrackArtistsRequestConfig(id = id, countryCode = countryCode, include = include)

        return@withContext request<Unit, TrackRelationshipsDocument>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getTrackArtists
     *
     * @param id TIDAL track id
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: artists (optional)
     * @return RequestConfig
     */
    fun getTrackArtistsRequestConfig(id: kotlin.String, countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("countryCode", listOf(countryCode.toString()))
                if (include != null) {
                    put("include", toMultiValue(include.toList(), "multi"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/vnd.api+json"
        localVariableHeaders["Accept"] = "application/vnd.api+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/tracks/{id}/relationships/artists".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Relationship: providers
     * This endpoint can be used to retrieve a list of track&#39;s related providers.
     * @param id TIDAL id of the track
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: providers (optional)
     * @return TrackRelationshipsDocument
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getTrackProviders(id: kotlin.String, countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>? = null) : TrackRelationshipsDocument = withContext(Dispatchers.IO) {
        val localVarResponse = getTrackProvidersWithHttpInfo(id = id, countryCode = countryCode, include = include)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TrackRelationshipsDocument
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Relationship: providers
     * This endpoint can be used to retrieve a list of track&#39;s related providers.
     * @param id TIDAL id of the track
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: providers (optional)
     * @return ApiResponse<TrackRelationshipsDocument?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun getTrackProvidersWithHttpInfo(id: kotlin.String, countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>?) : ApiResponse<TrackRelationshipsDocument?> = withContext(Dispatchers.IO) {
        val localVariableConfig = getTrackProvidersRequestConfig(id = id, countryCode = countryCode, include = include)

        return@withContext request<Unit, TrackRelationshipsDocument>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getTrackProviders
     *
     * @param id TIDAL id of the track
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: providers (optional)
     * @return RequestConfig
     */
    fun getTrackProvidersRequestConfig(id: kotlin.String, countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("countryCode", listOf(countryCode.toString()))
                if (include != null) {
                    put("include", toMultiValue(include.toList(), "multi"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/vnd.api+json"
        localVariableHeaders["Accept"] = "application/vnd.api+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/tracks/{id}/relationships/providers".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get multiple tracks
     * Retrieve multiple track details.
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: artists, albums, providers, similarTracks (optional)
     * @param filterId Allows to filter the collection of resources based on id attribute value (optional)
     * @param filterIsrc Allows to filter the collection of resources based on isrc attribute value (optional)
     * @return TracksDataDocument
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getTracks(countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>? = null, filterId: kotlin.collections.List<kotlin.String>? = null, filterIsrc: kotlin.collections.List<kotlin.String>? = null) : TracksDataDocument = withContext(Dispatchers.IO) {
        val localVarResponse = getTracksWithHttpInfo(countryCode = countryCode, include = include, filterId = filterId, filterIsrc = filterIsrc)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TracksDataDocument
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get multiple tracks
     * Retrieve multiple track details.
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: artists, albums, providers, similarTracks (optional)
     * @param filterId Allows to filter the collection of resources based on id attribute value (optional)
     * @param filterIsrc Allows to filter the collection of resources based on isrc attribute value (optional)
     * @return ApiResponse<TracksDataDocument?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun getTracksWithHttpInfo(countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>?, filterId: kotlin.collections.List<kotlin.String>?, filterIsrc: kotlin.collections.List<kotlin.String>?) : ApiResponse<TracksDataDocument?> = withContext(Dispatchers.IO) {
        val localVariableConfig = getTracksRequestConfig(countryCode = countryCode, include = include, filterId = filterId, filterIsrc = filterIsrc)

        return@withContext request<Unit, TracksDataDocument>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getTracks
     *
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: artists, albums, providers, similarTracks (optional)
     * @param filterId Allows to filter the collection of resources based on id attribute value (optional)
     * @param filterIsrc Allows to filter the collection of resources based on isrc attribute value (optional)
     * @return RequestConfig
     */
    fun getTracksRequestConfig(countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>?, filterId: kotlin.collections.List<kotlin.String>?, filterIsrc: kotlin.collections.List<kotlin.String>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("countryCode", listOf(countryCode.toString()))
                if (include != null) {
                    put("include", toMultiValue(include.toList(), "multi"))
                }
                if (filterId != null) {
                    put("filter[id]", toMultiValue(filterId.toList(), "multi"))
                }
                if (filterIsrc != null) {
                    put("filter[isrc]", toMultiValue(filterIsrc.toList(), "multi"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/vnd.api+json"
        localVariableHeaders["Accept"] = "application/vnd.api+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/tracks",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
