/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.tidal.sdk.catalog.apis

import com.tidal.sdk.catalog.infrastructure.ApiClient
import com.tidal.sdk.catalog.infrastructure.ApiResponse
import com.tidal.sdk.catalog.infrastructure.ClientError
import com.tidal.sdk.catalog.infrastructure.ClientException
import com.tidal.sdk.catalog.infrastructure.MultiValueMap
import com.tidal.sdk.catalog.infrastructure.RequestConfig
import com.tidal.sdk.catalog.infrastructure.RequestMethod
import com.tidal.sdk.catalog.infrastructure.ResponseType
import com.tidal.sdk.catalog.infrastructure.ServerError
import com.tidal.sdk.catalog.infrastructure.ServerException
import com.tidal.sdk.catalog.infrastructure.Success
import com.tidal.sdk.catalog.infrastructure.toMultiValue
import com.tidal.sdk.catalog.models.VideoDataDocument
import com.tidal.sdk.catalog.models.VideoRelationshipsDocument
import com.tidal.sdk.catalog.models.VideosDataDocument
import okhttp3.HttpUrl
import okhttp3.OkHttpClient
import java.io.IOException

class VideoJSONAPIApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.BASE_URL_KEY, "https://openapi.stage.tidal.com/v2")
        }
    }

    /**
     * Get single video
     * Retrieve video details by TIDAL video id.
     * @param id TIDAL video id
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: artists, albums, providers (optional)
     * @return VideoDataDocument
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getVideo(id: kotlin.String, countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>? = null) : VideoDataDocument {
        val localVarResponse = getVideoWithHttpInfo(id = id, countryCode = countryCode, include = include)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as VideoDataDocument
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get single video
     * Retrieve video details by TIDAL video id.
     * @param id TIDAL video id
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: artists, albums, providers (optional)
     * @return ApiResponse<VideoDataDocument?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getVideoWithHttpInfo(id: kotlin.String, countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>?) : ApiResponse<VideoDataDocument?> {
        val localVariableConfig = getVideoRequestConfig(id = id, countryCode = countryCode, include = include)

        return request<Unit, VideoDataDocument>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getVideo
     *
     * @param id TIDAL video id
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: artists, albums, providers (optional)
     * @return RequestConfig
     */
    fun getVideoRequestConfig(id: kotlin.String, countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("countryCode", listOf(countryCode.toString()))
                if (include != null) {
                    put("include", toMultiValue(include.toList(), "multi"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/vnd.api+json"
        localVariableHeaders["Accept"] = "application/vnd.api+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/videos/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Relationship: albums
     * Retrieve album details of the related video.
     * @param id TIDAL video id
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: albums (optional)
     * @return VideoRelationshipsDocument
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getVideoAlbums(id: kotlin.String, countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>? = null) : VideoRelationshipsDocument {
        val localVarResponse = getVideoAlbumsWithHttpInfo(id = id, countryCode = countryCode, include = include)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as VideoRelationshipsDocument
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Relationship: albums
     * Retrieve album details of the related video.
     * @param id TIDAL video id
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: albums (optional)
     * @return ApiResponse<VideoRelationshipsDocument?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getVideoAlbumsWithHttpInfo(id: kotlin.String, countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>?) : ApiResponse<VideoRelationshipsDocument?> {
        val localVariableConfig = getVideoAlbumsRequestConfig(id = id, countryCode = countryCode, include = include)

        return request<Unit, VideoRelationshipsDocument>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getVideoAlbums
     *
     * @param id TIDAL video id
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: albums (optional)
     * @return RequestConfig
     */
    fun getVideoAlbumsRequestConfig(id: kotlin.String, countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("countryCode", listOf(countryCode.toString()))
                if (include != null) {
                    put("include", toMultiValue(include.toList(), "multi"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/vnd.api+json"
        localVariableHeaders["Accept"] = "application/vnd.api+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/videos/{id}/relationships/albums".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Relationship: artists
     * Retrieve artist details of the related video.
     * @param id TIDAL video id
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: artists (optional)
     * @return VideoRelationshipsDocument
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getVideoArtists(id: kotlin.String, countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>? = null) : VideoRelationshipsDocument {
        val localVarResponse = getVideoArtistsWithHttpInfo(id = id, countryCode = countryCode, include = include)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as VideoRelationshipsDocument
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Relationship: artists
     * Retrieve artist details of the related video.
     * @param id TIDAL video id
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: artists (optional)
     * @return ApiResponse<VideoRelationshipsDocument?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getVideoArtistsWithHttpInfo(id: kotlin.String, countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>?) : ApiResponse<VideoRelationshipsDocument?> {
        val localVariableConfig = getVideoArtistsRequestConfig(id = id, countryCode = countryCode, include = include)

        return request<Unit, VideoRelationshipsDocument>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getVideoArtists
     *
     * @param id TIDAL video id
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: artists (optional)
     * @return RequestConfig
     */
    fun getVideoArtistsRequestConfig(id: kotlin.String, countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("countryCode", listOf(countryCode.toString()))
                if (include != null) {
                    put("include", toMultiValue(include.toList(), "multi"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/vnd.api+json"
        localVariableHeaders["Accept"] = "application/vnd.api+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/videos/{id}/relationships/artists".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Relationship: providers
     * This endpoint can be used to retrieve a list of video&#39;s related providers.
     * @param id TIDAL id of the video
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: providers (optional)
     * @return VideoRelationshipsDocument
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getVideoProviders(id: kotlin.String, countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>? = null) : VideoRelationshipsDocument {
        val localVarResponse = getVideoProvidersWithHttpInfo(id = id, countryCode = countryCode, include = include)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as VideoRelationshipsDocument
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Relationship: providers
     * This endpoint can be used to retrieve a list of video&#39;s related providers.
     * @param id TIDAL id of the video
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: providers (optional)
     * @return ApiResponse<VideoRelationshipsDocument?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getVideoProvidersWithHttpInfo(id: kotlin.String, countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>?) : ApiResponse<VideoRelationshipsDocument?> {
        val localVariableConfig = getVideoProvidersRequestConfig(id = id, countryCode = countryCode, include = include)

        return request<Unit, VideoRelationshipsDocument>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getVideoProviders
     *
     * @param id TIDAL id of the video
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: providers (optional)
     * @return RequestConfig
     */
    fun getVideoProvidersRequestConfig(id: kotlin.String, countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("countryCode", listOf(countryCode.toString()))
                if (include != null) {
                    put("include", toMultiValue(include.toList(), "multi"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/vnd.api+json"
        localVariableHeaders["Accept"] = "application/vnd.api+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/videos/{id}/relationships/providers".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get multiple videos
     * Retrieve multiple video details.
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: artists, albums, providers (optional)
     * @param filterId Allows to filter the collection of resources based on id attribute value (optional)
     * @param filterIsrc Allows to filter the collection of resources based on isrc attribute value (optional)
     * @return VideosDataDocument
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getVideos(countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>? = null, filterId: kotlin.collections.List<kotlin.String>? = null, filterIsrc: kotlin.collections.List<kotlin.String>? = null) : VideosDataDocument {
        val localVarResponse = getVideosWithHttpInfo(countryCode = countryCode, include = include, filterId = filterId, filterIsrc = filterIsrc)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as VideosDataDocument
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get multiple videos
     * Retrieve multiple video details.
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: artists, albums, providers (optional)
     * @param filterId Allows to filter the collection of resources based on id attribute value (optional)
     * @param filterIsrc Allows to filter the collection of resources based on isrc attribute value (optional)
     * @return ApiResponse<VideosDataDocument?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getVideosWithHttpInfo(countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>?, filterId: kotlin.collections.List<kotlin.String>?, filterIsrc: kotlin.collections.List<kotlin.String>?) : ApiResponse<VideosDataDocument?> {
        val localVariableConfig = getVideosRequestConfig(countryCode = countryCode, include = include, filterId = filterId, filterIsrc = filterIsrc)

        return request<Unit, VideosDataDocument>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getVideos
     *
     * @param countryCode ISO 3166-1 alpha-2 country code
     * @param include Allows the client to customize which related resources should be returned. Available options: artists, albums, providers (optional)
     * @param filterId Allows to filter the collection of resources based on id attribute value (optional)
     * @param filterIsrc Allows to filter the collection of resources based on isrc attribute value (optional)
     * @return RequestConfig
     */
    fun getVideosRequestConfig(countryCode: kotlin.String, include: kotlin.collections.List<kotlin.String>?, filterId: kotlin.collections.List<kotlin.String>?, filterIsrc: kotlin.collections.List<kotlin.String>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("countryCode", listOf(countryCode.toString()))
                if (include != null) {
                    put("include", toMultiValue(include.toList(), "multi"))
                }
                if (filterId != null) {
                    put("filter[id]", toMultiValue(filterId.toList(), "multi"))
                }
                if (filterIsrc != null) {
                    put("filter[isrc]", toMultiValue(filterIsrc.toList(), "multi"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/vnd.api+json"
        localVariableHeaders["Accept"] = "application/vnd.api+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/videos",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
